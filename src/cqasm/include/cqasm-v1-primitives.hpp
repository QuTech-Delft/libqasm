/** \file
 * Defines primitive types for use in trees generated by \ref tree-gen.
 */

#pragma once

#include <string>
#include <cstdint>
#include <complex>
#include <vector>

#include "cqasm-version.hpp"
#include "tree-cbor.hpp"

namespace cqasm {
namespace v1 {

/**
 * Namespace for the primitive types used in trees generated by \ref tree-gen.
 */
namespace primitives {

/**
 * Generates a default value for the given primitive type. This is specialized
 * for the primitives mapping to builtin types (int, bool, etc, for which the
 * "constructor" doesn't initialize the value at all) such that they actually
 * initialize with a sane default. Used in the default constructors of the
 * generated tree nodes to ensure that there's no garbage in the nodes.
 */
template <class T>
T initialize() { return T(); }

/**
 * Serializes the given primitive object to CBOR.
 */
template <typename T>
void serialize(const T &obj, ::tree::cbor::MapWriter &map);

/**
 * Deserializes the given primitive object from CBOR.
 */
template <typename T>
T deserialize(const ::tree::cbor::MapReader &map);

/**
 * String primitive used within the AST and semantic trees.
 */
using Str = std::string;
template <>
Str initialize<Str>();
template <>
void serialize(const Str &obj, ::tree::cbor::MapWriter &map);
template <>
Str deserialize(const ::tree::cbor::MapReader &map);

/**
 * Boolean primitive used within the semantic trees. Defaults to false.
 */
using Bool = bool;
template <>
Bool initialize<Bool>();
template <>
void serialize(const Bool &obj, ::tree::cbor::MapWriter &map);
template <>
Bool deserialize(const ::tree::cbor::MapReader &map);

/**
 * Axis primitive used within the semantic trees. Defaults to X.
 */
enum class Axis { X, Y, Z };
template <>
Axis initialize<Axis>();
template <>
void serialize(const Axis &obj, ::tree::cbor::MapWriter &map);
template <>
Axis deserialize(const ::tree::cbor::MapReader &map);

/**
 * Integer primitive used within the AST and semantic trees.
 */
using Int = std::int64_t;
template <>
Int initialize<Int>();
template <>
void serialize(const Int &obj, ::tree::cbor::MapWriter &map);
template <>
Int deserialize(const ::tree::cbor::MapReader &map);

/**
 * Real number primitive used within the AST and semantic trees.
 */
using Real = double;
template <>
Real initialize<Real>();
template <>
void serialize(const Real &obj, ::tree::cbor::MapWriter &map);
template <>
Real deserialize(const ::tree::cbor::MapReader &map);

/**
 * Complex number primitive used within the semantic trees.
 */
using Complex = std::complex<double>;
template <>
void serialize(const Complex &obj, ::tree::cbor::MapWriter &map);
template <>
Complex deserialize(const ::tree::cbor::MapReader &map);

/**
 * Two-dimensional matrix of some kind of type.
 */
template <typename T>
class Matrix {
private:
    std::vector<T> data;
    size_t nrows;
    size_t ncols;
public:
    /**
     * Creates an empty matrix.
     */
    Matrix()
        : data(0), nrows(1), ncols(0)
    {}

    /**
     * Creates a vector.
     */
    explicit Matrix(size_t cols)
        : data(cols), nrows(1), ncols(cols)
    {}

    /**
     * Creates a zero-initialized matrix of the given size.
     */
    Matrix(size_t rows, size_t cols)
        : data(rows*cols), nrows(rows), ncols(cols)
    {}

    /**
     * Creates a column vector with the given data.
     */
    explicit Matrix(const std::vector<T> &vec)
        : data(vec), nrows(vec.size()), ncols(1)
    {}

    /**
     * Creates a matrix with the given data. The number of rows is inferred. If
     * the number of data elements is not divisible by the number of columns, a
     * range error is thrown.
     */
    Matrix(const std::vector<T> &vec, size_t cols)
    {
        if (vec.size() % cols != 0) {
            throw std::range_error("invalid matrix shape");
        }
        data = vec;
        nrows = vec.size() / cols;
        ncols = cols;
    }

    /**
     * Returns the number of rows.
     */
    size_t size_rows() const {
        return nrows;
    }

    /**
     * Returns the number of columns.
     */
    size_t size_cols() const {
        return ncols;
    }

    /**
     * Returns access to the raw data vector.
     */
    const std::vector<T> &get_data() const {
        return data;
    }

    /**
     * Returns the value at the given position. row and col start at 1. Throws
     * a std::range_error when either or both indices are out of range.
     */
    T at(size_t row, size_t col) const {
        if (row < 1 || row > nrows || col < 1 || col > ncols) {
            throw std::range_error("matrix index out of range");
        }
        return data[(row - 1) * ncols + col - 1];
    }

    /**
     * Returns a mutable reference to the value at the given position. row and
     * col start at 1. Throws a std::range_error when either or both indices
     * are out of range.
     */
    T &at(size_t row, size_t col) {
        if (row < 1 || row > nrows || col < 1 || col > ncols) {
            throw std::range_error("matrix index out of range");
        }
        return data[(row - 1) * ncols + col - 1];
    }

    /**
     * Equality operator for matrices.
     */
    bool operator==(const Matrix<T> &rhs) const {
        return data == rhs.data && nrows == rhs.nrows && ncols == rhs.ncols;
    }

    /**
     * Inequality operator for matrices.
     */
    bool operator!=(const Matrix<T> &rhs) const {
        return !(*this == rhs);
    }
};

/**
 * Matrix of real numbers.
 */
using RMatrix = Matrix<Real>;
template <>
void serialize(const RMatrix &obj, ::tree::cbor::MapWriter &map);
template <>
RMatrix deserialize(const ::tree::cbor::MapReader &map);

/**
 * Matrix of complex numbers.
 */
using CMatrix = Matrix<Complex>;
template <>
void serialize(const CMatrix &obj, ::tree::cbor::MapWriter &map);
template <>
CMatrix deserialize(const ::tree::cbor::MapReader &map);

/**
 * Version number primitive used within the AST and semantic trees.
 */
using Version = version::Version;
template <>
void serialize(const Version &obj, ::tree::cbor::MapWriter &map);
template <>
Version deserialize(const ::tree::cbor::MapReader &map);

/**
 * Stream << overload for axis nodes.
 */
std::ostream &operator<<(std::ostream &os, const Axis &axis);

/**
 * Stream << overload for matrix nodes.
 */
template <typename T>
std::ostream &operator<<(std::ostream &os, const Matrix<T> &mat) {
    os << "[";
    for (size_t row = 1; row <= mat.size_rows(); row++) {
        if (row > 1) {
            os << "; ";
        }
        for (size_t col = 1; col <= mat.size_cols(); col++) {
            if (col > 1) {
                os << ", ";
            }
            os << mat.at(row, col);
        }
    }
    os << "]";
    return os;
}

} // namespace primitives
} // namespace v1
} // namespace cqasm
