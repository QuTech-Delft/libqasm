# Implementation for the semantic tree node classes.
source

# Header file for the semantic tree node classes.
header "v3x/cqasm-semantic-gen.hpp"

include "cqasm-tree.hpp"
tree_namespace cqasm::tree

include "v3x/cqasm-instruction.hpp"
include "v3x/cqasm-primitives.hpp"
include "v3x/cqasm-types.hpp"
include "v3x/cqasm-values.hpp"
import cqasm.v3x.instruction
import cqasm.v3x.primitives
import cqasm.v3x.types
import cqasm.v3x.values

// Initialization function to use to construct default values for the tree base classes and primitives
initialize_function cqasm::v3x::primitives::initialize
serdes_functions cqasm::v3x::primitives::serialize cqasm::v3x::primitives::deserialize


# Namespace for the semantic tree node classes.
namespace cqasm
namespace v3x
namespace semantic

# Represents an annotation.
annotation_data {
    # The interface this annotation is intended for.
    # If a target doesn't support an interface, it should silently ignore the annotation.
    interface: cqasm::v3x::primitives::Str;

    # The operation within the interface that this annotation is intended for.
    # If a target supports the corresponding interface but not the operation, it should throw an error.
    operation: cqasm::v3x::primitives::Str;

    # Any operands attached to the annotation.
    operands: external Any<cqasm::v3x::values::Node>;
}

# Represents a node that carries annotation data.
annotated {
    annotations: Any<annotation_data>;

    variable {
        name: cqasm::v3x::primitives::Str;
        typ: external One<cqasm::v3x::types::TypeBase>;
    }

    statement {
        # Regular instruction (a gate, a gate modifier, a measure instruction, or a reset instruction)
        instruction {
            instruction_call_value: external One<cqasm::v3x::values::ValueBase>;
        }
    }
}

version {
    items: cqasm::v3x::primitives::Version;
}

block {
    statements: Any<statement>;
}

program {
    # API version.
    # This may be greater than or equal to the file version.
    # This controls which fields of the tree are used, where such usage depends on the version.
    api_version: cqasm::v3x::primitives::Version;

    # File version.
    version: One<version>;

    # Global scope block.
    block: One<block>;

    # The list of variables.
    variables: Any<variable>;
}
