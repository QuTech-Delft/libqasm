# Implementation for the abstract syntax tree node classes
source

# Header file for the abstract syntax tree node classes
header "v3x/cqasm-ast-gen.hpp"

// Include tree base classes.
include "cqasm-tree.hpp"
tree_namespace cqasm::tree

// Include primitive types.
include "v3x/cqasm-primitives.hpp"
import cqasm.v3x.primitives

// Initialization function to use to construct default values for the tree base classes and primitives
initialize_function cqasm::v3x::primitives::initialize
serdes_functions cqasm::v3x::primitives::serialize cqasm::v3x::primitives::deserialize

// Include SourceLocation annotation object for the debug dump generator
src_include "cqasm-annotations.hpp"
location cqasm::annotations::SourceLocation


# Namespace for the abstract syntax tree node classes
namespace cqasm
namespace v3x
namespace ast

keyword {
    name: cqasm::v3x::primitives::Str;
}

index_entry {
    # Zero based.
    index_item {
        index: One<expression>;
    }

    # Inclusive.
    index_range {
        first: One<expression>;
        last: One<expression>;
    }
}

index_list {
    items: Many<index_entry>;
}

expression {
    boolean_literal {
        value: cqasm::v3x::primitives::Bool;
    }

    integer_literal {
        value: cqasm::v3x::primitives::Int;
    }

    float_literal {
        value: cqasm::v3x::primitives::Float;
    }

    index {
        expr: One<expression>;
        indices: One<index_list>;
    }

    identifier {
        name: cqasm::v3x::primitives::Str;
    }

    function_call {
        name: One<identifier>;
        arguments: Maybe<expression_list>;
    }

    unary_expression {
        expr: One<expression>;

        # Two's complement.
        unary_minus_expression {}

        # One's complement.
        bitwise_not_expression {}

        logical_not_expression {}
    }

    binary_expression {
        lhs: One<expression>;
        rhs: One<expression>;

        arithmetic_expression {
            power_expression {}
            product_expression {}
            division_expression {}
            modulo_expression {}
            addition_expression {}
            subtraction_expression {}
        }

        shift_expression {
            shift_left_expression {}
            shift_right_expression {}
        }

        comparison_expression {
            cmp_gt_expression {}
            cmp_lt_expression {}
            cmp_ge_expression {}
            cmp_le_expression {}
        }

        equality_expression {
            cmp_eq_expression {}
            cmp_ne_expression {}
        }

        bitwise_expression {
            bitwise_and_expression {}
            bitwise_xor_expression {}
            bitwise_or_expression {}
        }

        logical_expression {
            logical_and_expression {}
            logical_xor_expression {}
            logical_or_expression {}
        }
    }

    ternary_conditional_expression {
        cond: One<expression>;
        if_true: One<expression>;
        if_false: One<expression>;
    }
}

expression_list {
    items: Any<expression>;
}

annotation_data {
    # The interface this annotation is intended for.
    # If a target doesn't support an interface, it should silently ignore the annotation.
    interface: One<identifier>;

    # The operation within the interface that this annotation is intended for.
    # If a target supports the corresponding interface but not the operation, it should throw an error.
    operation: One<identifier>;

    # Any operands attached to the annotation.
    operands: One<expression_list>;
}

type {
    name: One<keyword>;
    size: Maybe<integer_literal>;
}

# Represents a node that carries annotation data
annotated {
    # Zero or more annotations attached to this object.
    annotations: Any<annotation_data>;

    statement {
        block_statement {
            # One variable declaration of some type.
            variable {
                name: One<identifier>;
                typ: One<type>;
            }

            instruction {
                gate_instruction {
                    modified_gate{
                        name: One<keyword>;
                        ctrl_qubit: Maybe<expression>;
                        operand: One<gate_instruction>;

                        inv_gate {}
                        pow_gate {}
                        ctrl_gate {}
                    }

                    gate {
                        name: One<identifier>;
                        operands: One<expression_list>;
                    }
                }

                # For some instructions, like the measure instruction,
                # we want to differentiate between left hand side and right and side operands.
                # For a measure instruction, the right hand side operand should be a qubit,
                # and the left hand side operand a bit.
                measure_instruction {
                    name: One<keyword>;
                    lhs: One<expression>;
                    rhs: One<expression>;
                }

                reset_instruction {
                    name: One<keyword>;
                    operand: Maybe<expression>;
                }
            }
        }
    }
}

version {
    items: cqasm::v3x::primitives::Version;
}

block {
    global_block {
        statements: Any<statement>;
    }
}

root {
    program {
        version: One<version>;
        block: One<global_block>;
    }
}
